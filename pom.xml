<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.wangxiao</groupId>
	<artifactId>docker_maven</artifactId>
	<version>0.0.2-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.9.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<docker.repostory>registry.cn-beijing.aliyuncs.com</docker.repostory>
		<docker.registry.name>gyjx-produce</docker.registry.name>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin -->
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<id>tag-image</id>
						<phase>package</phase>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<image>${docker.registry.name}/${project.artifactId}:${project.version}</image>
							<newName>
								${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
							</newName>
						</configuration>
					</execution>
					<execution>
						<id>push-image</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<imageName>
								${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
							</imageName>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<!-- 镜像名称 放到私有仓库中时镜像名称前要加仓库的地址 -->
					<imageName>
						${docker.registry.name}/${project.artifactId}:${project.version}
					</imageName>
					<!-- 仓库ID 与maven配置文件settings.xml一致 -->
					<serverId>docker-myrepo</serverId>
					<!-- dockerfile的文件目录 -->
					<dockerDirectory>${project.basedir}/</dockerDirectory>
					<pushImage>false</pushImage>
					<resources>
						<resource>
							<!-- 产出物的相对路径 相对<directory> -->
							<targetPath>/</targetPath>
							<!-- 构建目录，缺省为target -->
							<directory>${project.build.directory}</directory>
							<!-- 产出物名称，缺省为${project.artifactId}-${project.version} -->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>
